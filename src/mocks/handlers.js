/**
 * This file is AUTO GENERATED by [msw-auto-mock](https://github.com/zoubingwu/msw-auto-mock)
 * Feel free to commit/edit it as you need.
 */
/* eslint-disable */
/* tslint:disable */
import { HttpResponse, http } from "msw";
import { faker } from "@faker-js/faker";

faker.seed(1);

const baseURL = "api/v1";
const MAX_ARRAY_LENGTH = 20;

let i = 0;
const next = () => {
  if (i === Number.MAX_SAFE_INTEGER - 1) {
    i = 0;
  }
  return i++;
};

export const handlers = [
  http.get(`${baseURL}/automations`, async () => {
    const resultArray = [
      [await getGetAutomations200Response(), { status: 200 }],
      [await getGetAutomations401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/automations/:id`, async () => {
    const resultArray = [
      [await getGetAutomationsId200Response(), { status: 200 }],
      [await getGetAutomationsId401Response(), { status: 401 }],
      [await getGetAutomationsId404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/automations/:id/logs`, async () => {
    const resultArray = [
      [await getGetAutomationsIdLogs200Response(), { status: 200 }],
      [await getGetAutomationsIdLogs401Response(), { status: 401 }],
      [await getGetAutomationsIdLogs404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/automation-types`, async () => {
    const resultArray = [
      [await getGetAutomationTypes200Response(), { status: 200 }],
      [await getGetAutomationTypes401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/automation-types/:type`, async () => {
    const resultArray = [
      [await getGetAutomationTypesType200Response(), { status: 200 }],
      [await getGetAutomationTypesType401Response(), { status: 401 }],
      [await getGetAutomationTypesType404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/sas`, async () => {
    const resultArray = [
      [await getGetSas200Response(), { status: 200 }],
      [await getGetSas401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/runners`, async () => {
    const resultArray = [
      [await getGetRunners200Response(), { status: 200 }],
      [await getGetRunners401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/runners/:id`, async () => {
    const resultArray = [
      [await getGetRunnersId200Response(), { status: 200 }],
      [await getGetRunnersId401Response(), { status: 401 }],
      [await getGetRunnersId404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/jobs`, async () => {
    const resultArray = [
      [await getGetJobs200Response(), { status: 200 }],
      [await getGetJobs401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/jobs/:id`, async () => {
    const resultArray = [
      [await getGetJobsId200Response(), { status: 200 }],
      [await getGetJobsId401Response(), { status: 401 }],
      [await getGetJobsId404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/metrics`, async () => {
    const resultArray = [
      [await getGetMetrics200Response(), { status: 200 }],
      [await getGetMetrics401Response(), { status: 401 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
  http.get(`${baseURL}/metrics/:id`, async () => {
    const resultArray = [
      [await getGetMetricsId200Response(), { status: 200 }],
      [await getGetMetricsId401Response(), { status: 401 }],
      [await getGetMetricsId404Response(), { status: 404 }],
    ];

    return HttpResponse.json(...resultArray[next() % resultArray.length]);
  }),
];

export function getGetAutomations200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: faker.lorem.words(),
    type: faker.lorem.words(),
    sas: faker.lorem.words(),
    state: faker.lorem.words(),
    last_activity: faker.date.past(),
  }));
}

export function getGetAutomations401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetAutomationsId200Response() {
  return {
    id: faker.lorem.words(),
    type: faker.lorem.words(),
    sas: faker.lorem.words(),
    state: faker.lorem.words(),
    last_activity: faker.date.past(),
  };
}

export function getGetAutomationsId401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetAutomationsId404Response() {
  return {
    data: {},
  };
}

export function getGetAutomationsIdLogs200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    automation_id: faker.lorem.words(),
    timestamp: faker.date.past(),
    level: faker.lorem.words(),
    type: faker.lorem.words(),
    from_state: faker.lorem.words(),
    to_state: faker.lorem.words(),
    description: faker.lorem.words(),
  }));
}

export function getGetAutomationsIdLogs401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetAutomationsIdLogs404Response() {
  return {
    data: {},
  };
}

export function getGetAutomationTypes200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    type: faker.lorem.words(),
    states: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
    initial_state: faker.lorem.words(),
    end_state: faker.lorem.words(),
    transitions: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      from_state: faker.lorem.words(),
      to_state: faker.lorem.words(),
      event: faker.lorem.words(),
      action: faker.lorem.words(),
    })),
  }));
}

export function getGetAutomationTypes401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetAutomationTypesType200Response() {
  return {
    type: faker.lorem.words(),
    states: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => faker.lorem.words()),
    initial_state: faker.lorem.words(),
    end_state: faker.lorem.words(),
    transitions: [
      ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
    ].map((_) => ({
      from_state: faker.lorem.words(),
      to_state: faker.lorem.words(),
      event: faker.lorem.words(),
      action: faker.lorem.words(),
    })),
  };
}

export function getGetAutomationTypesType401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetAutomationTypesType404Response() {
  return {
    data: {},
  };
}

export function getGetSas200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => faker.lorem.words());
}

export function getGetSas401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetRunners200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: faker.lorem.words(),
    state: faker.helpers.arrayElement(["idle", "active", "failed", "offline"]),
    runner_group: faker.lorem.words(),
    organization: faker.lorem.words(),
  }));
}

export function getGetRunners401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetRunnersId200Response() {
  return {
    id: faker.lorem.words(),
    state: faker.helpers.arrayElement(["idle", "active", "failed", "offline"]),
    runner_group: faker.lorem.words(),
    organization: faker.lorem.words(),
  };
}

export function getGetRunnersId401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetRunnersId404Response() {
  return {
    data: {},
  };
}

export function getGetJobs200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    id: faker.lorem.words(),
    state: faker.helpers.arrayElement([
      "success",
      "failed",
      "queued",
      "in_progress",
    ]),
    organization: faker.lorem.words(),
    SAS: faker.lorem.words(),
    runner: faker.lorem.words(),
    timestamp: faker.date.past(),
  }));
}

export function getGetJobs401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetJobsId200Response() {
  return {
    id: faker.lorem.words(),
    state: faker.helpers.arrayElement([
      "success",
      "failed",
      "queued",
      "in_progress",
    ]),
    organization: faker.lorem.words(),
    SAS: faker.lorem.words(),
    runner: faker.lorem.words(),
    timestamp: faker.date.past(),
  };
}

export function getGetJobsId401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetJobsId404Response() {
  return {
    data: {},
  };
}

export function getGetMetrics200Response() {
  return [
    ...new Array(faker.number.int({ min: 1, max: MAX_ARRAY_LENGTH })).keys(),
  ].map((_) => ({
    cpu: faker.number.int(),
    memory: faker.number.int(),
    network_receive: faker.number.int(),
    network_transmit: faker.number.int(),
    fs_reads: faker.number.int(),
    fs_writes: faker.number.int(),
  }));
}

export function getGetMetrics401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetMetricsId200Response() {
  return {
    cpu: faker.number.int(),
    memory: faker.number.int(),
    network_receive: faker.number.int(),
    network_transmit: faker.number.int(),
    fs_reads: faker.number.int(),
    fs_writes: faker.number.int(),
  };
}

export function getGetMetricsId401Response() {
  return {
    code: faker.lorem.words(),
    error: faker.lorem.words(),
    message: faker.lorem.words(),
  };
}

export function getGetMetricsId404Response() {
  return {
    data: {},
  };
}
